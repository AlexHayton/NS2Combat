<shader>

	<inputs>
		<input name="albedoMap" type="texture" address="wrap" srgb="true"/>
		<input name="normalMap" type="texture" address="wrap" srgb="true"/>
	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="alphaTest">true</param>
	</params>
	
	<code> 
	<![CDATA[
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
      return n.xyz;
		}
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			const float3 tint = float3(.4, .42, .12);
			const float3 tint2 = float3(50, 12, 1);
		
			float3 Noisenormal = DecodeNormal( tex2D( normalMap, input.texCoord * 6 + float2( time * -.01, time * -.04) ) );
			float3 albedo1 = tex2D( albedoMap, input.texCoord * 6 + float2( time * .02, time * -.02) ).rgb;
			float3 albedo2 = tex2D( albedoMap, input.texCoord  * float2(10, 9) + float2( time * .02, time * -.04) ).rgb;
			float fresnel =  pow(max(-input.vsNormal.z, 0), 10);
			float3 noise = tex2D( albedoMap, (input.texCoord *1 + float2(0, time * -.03)) * float2(1, 0.5) ).rgb;
			float3 noise2 = tex2D( albedoMap, (input.texCoord *5 + float2(0, time * -.2))).rgb; 
			
			material.albedo = (albedo1 * noise + albedo2) * tint  ;
			material.opacity= (albedo1 + albedo2) * noise  * 3  ;
			material.tsNormal= Noisenormal ;
		
		 	material.gloss    = 100;
			
			material.id = 1;
			
		}
	]]>
	</code>

</shader>